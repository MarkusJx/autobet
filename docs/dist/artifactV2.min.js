class GithubApi{constructor(owner,repo){this.owner=owner,this.repo=repo}async getWorkflows(){return fetch(`https://api.github.com/repos/${this.owner}/${this.repo}/actions/runs`).then(r=>r.json())}async getArtifactsForWorkflow(id){return fetch(`https://api.github.com/repos/${this.owner}/${this.repo}/actions/runs/${id}/artifacts`).then(r=>r.json())}async getRunByArtifactId(id){const workflows=await this.getWorkflows(),runs=workflows.workflow_runs;for(let i=0;i<runs.length;i++)try{if("completed"===runs[i].status&&"success"===runs[i].conclusion){let artifacts=await this.getArtifactsForWorkflow(runs[i].id);artifacts=artifacts.artifacts;for(let j=0;j<artifacts.length;j++)if(artifacts[i].id===id)return runs[i]}}catch(ignored){}throw new Error("Could not get the run")}async getLatestRelease(){return fetch(`https://api.github.com/repos/${this.owner}/${this.repo}/releases/latest`).then(r=>r.json())}async getLatestReleaseDownloadAddress(releaseName){const release=await this.getLatestRelease(),res=release.assets.find(e=>e.name.match(releaseName));if(void 0!==res)return res.browser_download_url;throw new Error("Could not get the download url")}async getLatestReleaseTag(){let res;return(await this.getLatestRelease()).tag_name}async getArtifacts(){return fetch(`https://api.github.com/repos/${this.owner}/${this.repo}/actions/artifacts`).then(r=>r.json())}async getLatestArtifact(artifactName){let artifacts=await this.getArtifacts();if(artifacts.hasOwnProperty("artifacts")){artifacts=artifacts.artifacts;for(let i=0;i<artifacts.length;i++)if(artifacts.hasOwnProperty(i)&&artifacts[i].hasOwnProperty("name")){let name;if(artifacts[i].name.match(artifactName))return artifacts[i]}}throw new Error("Could not get the latest artifact")}}