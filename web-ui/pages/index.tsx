import Head from 'next/head'
import Image from 'next/image'
import React from 'react'
import styles from '../styles/Home.module.scss'
import StaticInstances from "../src/util/StaticInstances";
import CustomAlert from "../components/util/CustomAlert";
import LoadingBackdrop from "../components/util/LoadingBackdrop";
import MainContent from "../components/MainContent";

export default class Home extends React.Component {
    private connectionError: CustomAlert | null = null;
    private disconnectedAlert: CustomAlert | null = null;
    private connectedAlert: CustomAlert | null = null;
    private reloadingAlert: CustomAlert | null = null;
    private loadingBackdrop: LoadingBackdrop | null = null;

    private mainContent: MainContent | null = null;

    public override render(): React.ReactNode {
        return (
            <div className={styles.container}>
                <Head>
                    <title>Autobet</title>
                    <meta name="description" content="Generated by create next app"/>
                    <link rel="icon" href="/favicon.ico"/>
                </Head>

                <main className={styles.main}>
                    <MainContent ref={e => this.mainContent = e}/>

                    <div className={styles.errorContainer}>
                        <CustomAlert ref={e => this.connectionError = e} severity="error">
                            Could not connect to the backend!
                        </CustomAlert>
                        <CustomAlert severity="error" ref={e => StaticInstances.gameNotRunningAlert = e} closeable>
                            The game is not running on the target machine. Start the game and try again.
                        </CustomAlert>
                        <CustomAlert severity="warning" ref={e => this.disconnectedAlert = e} closeable>
                            Disconnected. Retrying to reconnect in 10 seconds.
                        </CustomAlert>
                        <CustomAlert severity="info" ref={e => this.reloadingAlert = e}>
                            Reloading. This may take a while.
                        </CustomAlert>
                        <CustomAlert severity="success" ref={e => this.connectedAlert = e} closeable>
                            Successfully connected.
                        </CustomAlert>
                        <CustomAlert severity="info" closeable ref={e => StaticInstances.bettingStartAlert = e}>
                            Attempting to start the betting process...
                        </CustomAlert>
                        <CustomAlert severity="info" closeable ref={e => StaticInstances.bettingStopAlert = e}>
                            Attempting to stop the betting process...
                        </CustomAlert>
                    </div>
                </main>

                <LoadingBackdrop ref={e => this.loadingBackdrop = e}/>

                <footer className={styles.footer} style={{display: 'none'}}>
                    <a
                        href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
                        target="_blank"
                        rel="noopener noreferrer"
                    >
                        Powered by{' '}
                        <span className={styles.logo}>
                        <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16}/>
                    </span>
                    </a>
                </footer>
            </div>
        );
    }

    public override componentDidMount(): void {
        this.loadingBackdrop?.setOpen(true);
        StaticInstances.api.logging = false;

        const init = () => {
            StaticInstances.api.init().then(async () => {
                await this.mainContent?.loadData();
            }).catch(e => {
                console.error(e);
                this.connectionError?.show();
                this.reloadingAlert?.hide();
                this.loadingBackdrop?.setOpen(false);
                reload();
            });
        };

        let timeout: NodeJS.Timeout | null = null;
        const reload = () => {
            this.disconnectedAlert?.show();
            if (timeout == null) {
                timeout = setTimeout(() => {
                    if (!StaticInstances.api.connected) {
                        this.loadingBackdrop?.setOpen(true);
                        this.disconnectedAlert?.hide();
                        this.connectionError?.hide();
                        this.reloadingAlert?.show();
                        init();
                    }
                    timeout = null;
                }, 10000);
            }
        };

        StaticInstances.api.listen("disconnect", () => {
            reload();
        });

        StaticInstances.api.listen("connect", () => {
            this.disconnectedAlert?.hide();
            this.loadingBackdrop?.setOpen(false);
            this.connectionError?.hide();
            this.reloadingAlert?.hide();
            this.connectedAlert?.show(10000);
        });

        init();
    }
}
